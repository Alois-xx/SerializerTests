// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SerializerTests.Serializers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BookShelfFlat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BookShelfFlat GetRootAsBookShelfFlat(ByteBuffer _bb) { return GetRootAsBookShelfFlat(_bb, new BookShelfFlat()); }
  public static BookShelfFlat GetRootAsBookShelfFlat(ByteBuffer _bb, BookShelfFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BookShelfFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public SerializerTests.Serializers.BookFlat? Books(int j) { int o = __p.__offset(4); return o != 0 ? (SerializerTests.Serializers.BookFlat?)(new SerializerTests.Serializers.BookFlat()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BooksLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Secret { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }

  public byte[] GetSecretArray() { return __p.__vector_as_array<byte>(6); }

  public static Offset<SerializerTests.Serializers.BookShelfFlat> CreateBookShelfFlat(FlatBufferBuilder builder,
      VectorOffset BooksOffset = default(VectorOffset),
      StringOffset SecretOffset = default(StringOffset)) {
    builder.StartTable(2);
    BookShelfFlat.AddSecret(builder, SecretOffset);
    BookShelfFlat.AddBooks(builder, BooksOffset);
    return BookShelfFlat.EndBookShelfFlat(builder);
  }

  public static void StartBookShelfFlat(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddBooks(FlatBufferBuilder builder, VectorOffset BooksOffset) { builder.AddOffset(0, BooksOffset.Value, 0); }
  public static VectorOffset CreateBooksVector(FlatBufferBuilder builder, Offset<SerializerTests.Serializers.BookFlat>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static VectorOffset CreateBooksVectorBlock(FlatBufferBuilder builder, Offset<SerializerTests.Serializers.BookFlat>[] data) { builder.StartVector(4, data.Length, 4); builder.Add(data); return builder.EndVector(); }
  public static void StartBooksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSecret(FlatBufferBuilder builder, StringOffset SecretOffset) { builder.AddOffset(1, SecretOffset.Value, 0); }
  public static Offset<SerializerTests.Serializers.BookShelfFlat> EndBookShelfFlat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SerializerTests.Serializers.BookShelfFlat>(o);
  }
  public static void FinishBookShelfFlatBuffer(FlatBufferBuilder builder, Offset<SerializerTests.Serializers.BookShelfFlat> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedBookShelfFlatBuffer(FlatBufferBuilder builder, Offset<SerializerTests.Serializers.BookShelfFlat> offset) { builder.FinishSizePrefixed(offset.Value); }
};


}
