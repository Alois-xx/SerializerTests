// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SerializerTests.Serializers
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct BookFlat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_1_12_0(); }
  public static BookFlat GetRootAsBookFlat(ByteBuffer _bb) { return GetRootAsBookFlat(_bb, new BookFlat()); }
  public static BookFlat GetRootAsBookFlat(ByteBuffer _bb, BookFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public BookFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Title { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }

  public byte[] GetTitleArray() { return __p.__vector_as_array<byte>(4); }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public byte BookData(int j) { int o = __p.__offset(8); return o != 0 ? __p.bb.Get(__p.__vector(o) + j * 1) : (byte)0; }
  public int BookDataLength { get { int o = __p.__offset(8); return o != 0 ? __p.__vector_len(o) : 0; } }

  public byte[] GetBookDataArray() { return __p.__vector_as_array<byte>(8); }

  public static Offset<SerializerTests.Serializers.BookFlat> CreateBookFlat(FlatBufferBuilder builder,
      StringOffset TitleOffset = default(StringOffset),
      int Id = 0,
      VectorOffset BookDataOffset = default(VectorOffset)) {
    builder.StartTable(3);
    BookFlat.AddBookData(builder, BookDataOffset);
    BookFlat.AddId(builder, Id);
    BookFlat.AddTitle(builder, TitleOffset);
    return BookFlat.EndBookFlat(builder);
  }

  public static void StartBookFlat(FlatBufferBuilder builder) { builder.StartTable(3); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset TitleOffset) { builder.AddOffset(0, TitleOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(1, Id, 0); }
  public static void AddBookData(FlatBufferBuilder builder, VectorOffset BookDataOffset) { builder.AddOffset(2, BookDataOffset.Value, 0); }
  public static VectorOffset CreateBookDataVector(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); for (int i = data.Length - 1; i >= 0; i--) builder.AddByte(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateBookDataVectorBlock(FlatBufferBuilder builder, byte[] data) { builder.StartVector(1, data.Length, 1); builder.Add(data); return builder.EndVector(); }
  public static void StartBookDataVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(1, numElems, 1); }
  public static Offset<SerializerTests.Serializers.BookFlat> EndBookFlat(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<SerializerTests.Serializers.BookFlat>(o);
  }
};


}
