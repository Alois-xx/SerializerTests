// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace SerializerTests.Serializers
{

using global::System;
using global::FlatBuffers;

public struct BookFlat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BookFlat GetRootAsBookFlat(ByteBuffer _bb) { return GetRootAsBookFlat(_bb, new BookFlat()); }
  public static BookFlat GetRootAsBookFlat(ByteBuffer _bb, BookFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BookFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public string Title { get { int o = __p.__offset(4); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetTitleBytes() { return __p.__vector_as_arraysegment(4); }
  public int Id { get { int o = __p.__offset(6); return o != 0 ? __p.bb.GetInt(o + __p.bb_pos) : (int)0; } }
  public bool MutateId(int Id) { int o = __p.__offset(6); if (o != 0) { __p.bb.PutInt(o + __p.bb_pos, Id); return true; } else { return false; } }

  public static Offset<BookFlat> CreateBookFlat(FlatBufferBuilder builder,
      StringOffset TitleOffset = default(StringOffset),
      int Id = 0) {
    builder.StartObject(2);
    BookFlat.AddId(builder, Id);
    BookFlat.AddTitle(builder, TitleOffset);
    return BookFlat.EndBookFlat(builder);
  }

  public static void StartBookFlat(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddTitle(FlatBufferBuilder builder, StringOffset TitleOffset) { builder.AddOffset(0, TitleOffset.Value, 0); }
  public static void AddId(FlatBufferBuilder builder, int Id) { builder.AddInt(1, Id, 0); }
  public static Offset<BookFlat> EndBookFlat(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BookFlat>(o);
  }
};

public struct BookShelfFlat : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static BookShelfFlat GetRootAsBookShelfFlat(ByteBuffer _bb) { return GetRootAsBookShelfFlat(_bb, new BookShelfFlat()); }
  public static BookShelfFlat GetRootAsBookShelfFlat(ByteBuffer _bb, BookShelfFlat obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public void __init(int _i, ByteBuffer _bb) { __p.bb_pos = _i; __p.bb = _bb; }
  public BookShelfFlat __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public BookFlat? Books(int j) { int o = __p.__offset(4); return o != 0 ? (BookFlat?)(new BookFlat()).__assign(__p.__indirect(__p.__vector(o) + j * 4), __p.bb) : null; }
  public int BooksLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public string Secret { get { int o = __p.__offset(6); return o != 0 ? __p.__string(o + __p.bb_pos) : null; } }
  public ArraySegment<byte>? GetSecretBytes() { return __p.__vector_as_arraysegment(6); }

  public static Offset<BookShelfFlat> CreateBookShelfFlat(FlatBufferBuilder builder,
      VectorOffset BooksOffset = default(VectorOffset),
      StringOffset SecretOffset = default(StringOffset)) {
    builder.StartObject(2);
    BookShelfFlat.AddSecret(builder, SecretOffset);
    BookShelfFlat.AddBooks(builder, BooksOffset);
    return BookShelfFlat.EndBookShelfFlat(builder);
  }

  public static void StartBookShelfFlat(FlatBufferBuilder builder) { builder.StartObject(2); }
  public static void AddBooks(FlatBufferBuilder builder, VectorOffset BooksOffset) { builder.AddOffset(0, BooksOffset.Value, 0); }
  public static VectorOffset CreateBooksVector(FlatBufferBuilder builder, Offset<BookFlat>[] data) { builder.StartVector(4, data.Length, 4); for (int i = data.Length - 1; i >= 0; i--) builder.AddOffset(data[i].Value); return builder.EndVector(); }
  public static void StartBooksVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(4, numElems, 4); }
  public static void AddSecret(FlatBufferBuilder builder, StringOffset SecretOffset) { builder.AddOffset(1, SecretOffset.Value, 0); }
  public static Offset<BookShelfFlat> EndBookShelfFlat(FlatBufferBuilder builder) {
    int o = builder.EndObject();
    return new Offset<BookShelfFlat>(o);
  }
  public static void FinishBookShelfFlatBuffer(FlatBufferBuilder builder, Offset<BookShelfFlat> offset) { builder.Finish(offset.Value); }
};


}
